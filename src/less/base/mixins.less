// || FLEX
.vertical-flex {
    display: flex;
    flex-direction: column;
}

.horizontal-flex {
    display: flex;
    flex-direction: row;
}
.center-main {
    justify-content: center;
}

.center-cross {
    align-items: center;
}

.center-flex {
    display: flex;
    .center-main;
    .center-cross;
}


// || GENERAL
.center-transform {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// || GEOMETRY
.support-height {
    height: 100svh;
}

.fill-width {
    width: 100%;
}

.fill-height {
    height: 100%;
}

.fill-viewport {
    .support-height;
    width: 100vw;
}

/* || BREAKPOINTS
Usage: .breakpoint( size[small, medium, large], {  CSS RULES  });

 -> Can be nested within layouts ( doesn't have to be a top level rule )
*/
.breakpoint(small,@rules) {
    @media only screen and (max-width: @breakpoint-small) {@rules();}
}
.breakpoint(medium,@rules) {
    @media only screen and  (max-width: @breakpoint-medium) {@rules();}
}
.breakpoint(large,@rules) {
    @media only screen and (min-width: @breakpoint-medium) {@rules();}
}


.border-squircle(@radius-x; @radius-y) {
    .loop(@radius-x; @radius-y; 359; 100% 0);
}
  
.loop(@radius-x; @radius-y; @counter; @list) when (@counter >= 0) {

    @cos-x: cos(unit(@counter, deg));
    @x: pow(abs(@cos-x), unit(@radius-x) / 100) * 50 * abs(@cos-x + 0.0000000001) / (@cos-x + 0.0000000001) + 50;

    @sin-y: sin(unit(@counter, deg));
    @y: pow(abs(@sin-y), unit(@radius-y) / 100) * 50 * abs(@sin-y + 0.0000000001) / (@sin-y + 0.0000000001) + 50;

    @percent-x: percentage(round(@x, 1) / 100);
    @percent-y: percentage(round(@y, 1) / 100);

    @new-list: @percent-x @percent-y, @list;
    .loop(@radius-x; @radius-y; (@counter - 1); @new-list);
}
.loop(@radius-x; @radius-y; @counter; @list) when (@counter < 0) {
    clip-path: polygon(@list);
}